#BlueJ class context
comment0.target=PollutionAnalyser
comment0.text=\n\ The\ program\ contains\ methods\ which\ analyse\ and\ plot\ hourly\ Nitrogen\ Dioxide\n\ air\ pollution\ levels\ over\ the\ course\ of\ a\ day.\n\ There\ are\ several\ things\ about\ the\ pollution\ level\ that\n\ a\ user\ may\ be\ interested\ in\:\n\ \ \ \ The\ average,\ maximum,\ and\ minimum\ pollution\ levels\ during\ the\ day.\n\ \ \ \ Any\ times\ when\ the\ pollution\ level\ went\ over\ the\ danger\ threshold.\n\ \ \ \ A\ plot\ of\ the\ values\n\ \ \ \ Whether\ the\ pollution\ level\ was\ over\ the\ danger\ threshold\ for\ more\ than\ 50%\ of\ the\ day.\n
comment1.params=
comment1.target=void\ analyse()
comment1.text=\n\ analyse()\ method\ reads\ a\ sequence\ of\ levels\ from\ the\ user\n\ and\ calls\ 6\ methods\ which\ each\ do\ one\ part\ of\ the\ analysis\:\n\ See\ the\ assignment\ instructions\n
comment10.params=
comment10.target=void\ simpleTest()
comment10.text=\n\ Test\ method\ with\ some\ "magic"\ to\ test\ your\ methods\n\ on\ the\ example\ data\ from\ the\ assignment\ handout.\n\ THIS\ IS\ NOT\ A\ COMPLETE\ TEST\ FOR\ YOUR\ PROGRAM\!\!\ \ \ \ \ \n
comment2.params=levels
comment2.target=void\ printAverageLevel(java.util.ArrayList)
comment2.text=\n\ CORE\n\ Calculate\ and\ print\ the\ average\ of\ the\ pollution\ levels\n\ \ There\ is\ guaranteed\ to\ be\ at\ least\ one\ level,\n
comment3.params=levels
comment3.target=void\ printDangerousLevels(java.util.ArrayList)
comment3.text=\n\ CORE\n\ Find\ and\ print\ out\ all\ the\ readings\ where\ the\ pollution\ level\ is\ above\ the\ danger\ threshold\ (120\ ppb).\n\ then\ print\ out\ the\ percentage\ of\ readings\ that\ were\ above\ the\ danger\ threshold.\n\ -\ may\ assume\ there\ is\ at\ least\ one\ level\ in\ the\ list.\n\ -\ The\ method\ will\ need\ a\ variable\ to\ keep\ track\ of\ the\ counts\ of\ danger\ levels,\ which\n\ \ \ needs\ to\ be\ initialised\ to\ an\ appropriate\ value.\n
comment4.params=levels
comment4.target=void\ plotLevels(java.util.ArrayList)
comment4.text=\n\ CORE\n\ \ \ Plots\ a\ bar\ graph\ of\ the\ sequence\ of\ levels,\n\ \ \ \ \ using\ narrow\ rectangles\ whose\ heights\ are\ equal\ to\ the\ level.\n\ \ \ Draws\ a\ horizontal\ line\ for\ the\ x-axis\ (or\ baseline)\ without\ any\ labels.\n\ COMPLETION\n\ \ \ Any\ level\ greater\ than\ NO2_DANGER_LEVEL\ should\ be\ plotted\ in\ red\ rather\ than\ blue\n\ \ \ Any\ level\ greater\ than\ MAX_VALUE\ (400)\ should\ be\ plotted\ as\ if\ it\ were\ just\ 400,\n\ \ \ \ \ putting\ an\ asterisk\ ("*")\ above\ it\ to\ show\ that\ it\ has\ been\ cut\ off.\n
comment5.params=levels
comment5.target=void\ medianLevel(java.util.ArrayList)
comment6.params=levels
comment6.target=double\ maximumLevel(java.util.ArrayList)
comment6.text=\n\ COMPLETION\n\ Find\ and\ return\ the\ maximum\ level\ in\ the\ list\n\ \ -\ There\ is\ guaranteed\ to\ be\ at\ least\ one\ level,\n\ \ -\ The\ method\ will\ need\ a\ variable\ to\ keep\ track\ of\ the\ maximum,\ which\n\ \ \ \ needs\ to\ be\ initialised\ to\ an\ appropriate\ value.\n
comment7.params=levels
comment7.target=double\ minimumLevel(java.util.ArrayList)
comment7.text=\n\ COMPLETION\n\ Find\ and\ return\ the\ minimum\ level\ in\ the\ list\n\ \ -\ There\ is\ guaranteed\ to\ be\ at\ least\ one\ level,\n\ \ -\ The\ method\ will\ need\ a\ variable\ to\ keep\ track\ of\ the\ minimum,\ which\n\ \ \ \ needs\ to\ be\ initialised\ to\ an\ appropriate\ value.\n
comment8.params=levels
comment8.target=void\ reportDangerPeriod(java.util.ArrayList)
comment8.text=\n\ COMPLETION\n\ Find\ and\ calculates\ if\ the\ pollution\ level\ was\ above\ the\ danger\ threshold\n\ continuously\ for\ more\ than\ half\ (50%)\ of\ the\ readings,\ and\ what\ percentage\ of\n\ the\ readings\ were\ in\ the\ above\ that\ level.\n
comment9.params=
comment9.target=void\ setupGUI()
comment9.text=Make\ buttons\ to\ let\ the\ user\ run\ the\ methods
numComments=11
